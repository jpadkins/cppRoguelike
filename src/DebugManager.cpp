///////////////////////////////////////////////////////////////////////////////
/// @file   DebugManager.cpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Class to assist with debugging the application by rendering
///         diagnostic information, debug gui, etc...
///////////////////////////////////////////////////////////////////////////////

#include "DebugManager.hpp"

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include "State.hpp"

///////////////////////////////////////////////////////////////////////////////
DebugManager::DebugManager(sf::Font& font) : m_fpsText("FPS: ", font, 16) {}

///////////////////////////////////////////////////////////////////////////////
void DebugManager::update()
{
    ++m_fpsCount;
    if ((m_acc += State::get().deltaMs) > 1000) {
        m_fpsText.setString("FPS: " + std::to_string(m_fpsCount));
        m_fpsCount = 0;
        m_acc -= 1000;
    }
}

///////////////////////////////////////////////////////////////////////////////
void DebugManager::draw(sf::RenderTarget& target, sf::RenderStates) const
{
    target.draw(m_fpsText);
}
