///////////////////////////////////////////////////////////////////////////////
/// @file   WindowManager.hpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Class that manages open Windows (in the GUI)
///////////////////////////////////////////////////////////////////////////////

#ifndef ROGUELIKE__WINDOW_MANAGER_HPP
#define ROGUELIKE__WINDOW_MANAGER_HPP

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <SFML/Graphics.hpp>

#include "Common.hpp"
#include "Window.hpp"

///////////////////////////////////////////////////////////////////////////////
/// @brief Manages the rendering of all active Windows
///////////////////////////////////////////////////////////////////////////////
class WindowManager : public sf::Drawable {
public:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Default constructor
    ///////////////////////////////////////////////////////////////////////////
    WindowManager() = default;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Removes an open Window
    ///
    /// @param tag  Tag of the Window to remove
    ///////////////////////////////////////////////////////////////////////////
    void remove(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Moves a Window with a matching tag to the highest z-level
    ///
    /// @param tag  Tag of the Window to move to ontop of all the others
    ///////////////////////////////////////////////////////////////////////////
    void setHighest(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Adds a new Window to be managed
    ///
    /// @param frame    Pointer to the Window to be managed
    ///////////////////////////////////////////////////////////////////////////
    void add(Window* frame);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Updates all managed frames
    ///
    /// The global State instance should call this once per frame
    ///////////////////////////////////////////////////////////////////////////
    void update();

private:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Typedefs
    ///////////////////////////////////////////////////////////////////////////
    typedef std::list<std::unique_ptr<Window>> WindowList;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Overloaded draw function from sf::Drawable/sf::Transformable
    ///
    /// Draws all managed Windows
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, sf::RenderStates) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Returns an iterator to the first WindowHandle with a matching tag
    ///////////////////////////////////////////////////////////////////////////
    WindowList::iterator getWindowIter(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    WindowList m_windows;
};

#endif
