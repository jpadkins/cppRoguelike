///////////////////////////////////////////////////////////////////////////////
/// @file   State.hpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Global singleton class containing references to different
///         management classes for the roguelike game and the root class for
///         update() and draw() calls
///////////////////////////////////////////////////////////////////////////////

#ifndef ROGUELIKE__STATE_HPP
#define ROGUELIKE__STATE_HPP

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include <memory>
#include <SFML/System.hpp>
#include <SFML/Graphics.hpp>

#include "Common.hpp"

///////////////////////////////////////////////////////////////////////////////
/// Forward declarations for State
///////////////////////////////////////////////////////////////////////////////
class FrameManager;

///////////////////////////////////////////////////////////////////////////////
/// @brief Singleton holding references to different management classes
///////////////////////////////////////////////////////////////////////////////
class State : public Updatable, public sf::Drawable {
public:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Disable copy constructor
    ///////////////////////////////////////////////////////////////////////////
    State(const State&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Disable assignment operator
    ///////////////////////////////////////////////////////////////////////////
    void operator=(const State&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Returns a reference to the global State instance
    ///
    /// @return A reference to the global State instance
    ///////////////////////////////////////////////////////////////////////////
    static State& get();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Updates all private management classes
    ///////////////////////////////////////////////////////////////////////////
    void update() override;

    ///////////////////////////////////////////////////////////////////////////
    sf::Int32 deltaMs;
    sf::Vector2i mousePosition;
    sf::Vector2i lastMousePosition;

private:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Default constructor
    ///////////////////////////////////////////////////////////////////////////
    State();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Overloaded draw function from sf::Drawable/sf::Transformable
    ///
    /// The draw call passes through to all managed objects, rendering a frame
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, sf::RenderStates) const override;

    ///////////////////////////////////////////////////////////////////////////
    std::unique_ptr<FrameManager> m_frameManager;
};

#endif
