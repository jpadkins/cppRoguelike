///////////////////////////////////////////////////////////////////////////////
/// @file   Zone.hpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Class describing a discreet area within the game world
///////////////////////////////////////////////////////////////////////////////

#ifndef ROGUELIKE__ZONE_HPP
#define ROGUELIKE__ZONE_HPP

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include <string>
#include <vector>
#include <SFML/Graphics.hpp>

#include "GlyphTileMap.hpp"

///////////////////////////////////////////////////////////////////////////////
/// @brief  Class describing a discreet area within the game world
///////////////////////////////////////////////////////////////////////////////
class Zone : public sf::Drawable {
public:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief TODO: Disable default constructor
    ///////////////////////////////////////////////////////////////////////////
    Zone();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Disable copy constructor
    ///////////////////////////////////////////////////////////////////////////
    Zone(const Zone&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Disable assignment operator
    ///////////////////////////////////////////////////////////////////////////
    void operator=(const Zone&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Updates internal state, should be called once per frame
    ///////////////////////////////////////////////////////////////////////////
    void update();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Sets the section of the map to render
    ///
    /// @param rect New section of the map to render
    ///////////////////////////////////////////////////////////////////////////
    void setMapSection(const sf::IntRect& section);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Sets the section of the map to render to the current frame size
    ///////////////////////////////////////////////////////////////////////////
    void setMapSectionToFrameSize();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Sets the center of the section of the map to center
    ///
    /// @param center   New position to center the map section on
    ///////////////////////////////////////////////////////////////////////////
    void setMapSectionCenter(const sf::Vector2i& center);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Returns the section of the map being rendered
    ///
    /// @return Section of the map being rendered
    ///////////////////////////////////////////////////////////////////////////
    const sf::IntRect& getMapSection();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Moves the location of the center of the map section
    ///
    /// @param delta    Change in position of the center of the map section
    ///////////////////////////////////////////////////////////////////////////
    void moveMapSection(const sf::Vector2i& delta);

    ///////////////////////////////////////////////////////////////////////////

    std::string name;

private:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Overloaded draw function from sf::Drawable
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, sf::RenderStates) const override;

    GlyphTileMap m_map;
    int m_mapPadding = 0;
    int m_scrollSpeed = 3;
    sf::IntRect m_mapSection;
    int m_scrollThreshold = 5;
    sf::RenderTexture m_mapBuffer;
};

///////////////////////////////////////////////////////////////////////////////

#endif
