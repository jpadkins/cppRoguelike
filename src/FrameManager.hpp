///////////////////////////////////////////////////////////////////////////////
/// @file   FrameManager.hpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Class that manages Frames (windows in the GUI)
///////////////////////////////////////////////////////////////////////////////

#ifndef ROGUELIKE__FRAME_MANAGER_HPP
#define ROGUELIKE__FRAME_MANAGER_HPP

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include <list>
#include <SFML/Graphics.hpp>

#include "Frame.hpp"
#include "Common.hpp"

///////////////////////////////////////////////////////////////////////////////
/// @brief Manages the rendering of all active Frames
///////////////////////////////////////////////////////////////////////////////
class FrameManager : public Updatable, public sf::Drawable {
public:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Default constructor
    ///////////////////////////////////////////////////////////////////////////
    FrameManager() = default;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Removes an open Frame
    ///
    /// @param tag  Tag of the Frame to remove
    ///////////////////////////////////////////////////////////////////////////
    void remove(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Moves a Frame with a matching tag to the highest z-level
    ///
    /// @param tag  Tag of the Frame to move to ontop of all the others
    ///////////////////////////////////////////////////////////////////////////
    void setHighest(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Adds a new Frame to be managed
    ///
    /// @param frame    Pointer to the Frame to be managed
    ///////////////////////////////////////////////////////////////////////////
    void add(Frame* frame);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Updates all managed frames
    ///
    /// The global State instance should call this once per frame
    ///////////////////////////////////////////////////////////////////////////
    void update() override;

private:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Typedefs
    ///////////////////////////////////////////////////////////////////////////
    typedef std::list<std::unique_ptr<Frame>> FrameList;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Overloaded draw function from sf::Drawable/sf::Transformable
    ///
    /// Draws all managed Frames
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, sf::RenderStates) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Returns an iterator to the first FrameHandle with a matching tag
    ///////////////////////////////////////////////////////////////////////////
    FrameList::iterator getFrameIter(const std::string& tag);

    ///////////////////////////////////////////////////////////////////////////
    FrameList m_frames;
};

#endif
