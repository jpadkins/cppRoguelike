///////////////////////////////////////////////////////////////////////////////
/// @file   DebugManager.hpp
/// @author Jacob Adkins (jpadkins)
/// @brief  Class to assist with debugging the application by rendering
///         diagnostic information, debug gui, etc...
///////////////////////////////////////////////////////////////////////////////

#ifndef ROGUELIKE__DEBUG_MANAGER_HPP
#define ROGUELIKE__DEBUG_MANAGER_HPP

///////////////////////////////////////////////////////////////////////////////
/// Headers
///////////////////////////////////////////////////////////////////////////////

#include <SFML/Graphics.hpp>
#include "Common.hpp"

///////////////////////////////////////////////////////////////////////////////
/// @brief Class to assist in debugging, manages rendered debug information
///////////////////////////////////////////////////////////////////////////////
class DebugManager : public sf::Drawable {
public:

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    ///////////////////////////////////////////////////////////////////////////
    explicit DebugManager(sf::Font& font);

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Updates internal state, should be called once per frame
    ///////////////////////////////////////////////////////////////////////////
    void update();

    ///////////////////////////////////////////////////////////////////////////
    /// @brief Overloaded draw function from sf::Drawable
    ///////////////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, sf::RenderStates) const override;

private:

    ///////////////////////////////////////////////////////////////////////////
    sf::Text m_fpsText;
    sf::Int32 m_acc = 0;
    sf::Int32 m_fpsCount = 0;
};

#endif